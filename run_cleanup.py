# -*- coding: utf-8 -*-
import os
import sys
import logging
import shutil
import time
from mutagen.mp3 import MP3, HeaderNotFoundError
from mutagen.easyid3 import EasyID3
from src.config import (
    BASE_DIR, DOWNLOADS_DIR, BACKUP_DIR_BASE, CLEANUP_LOG_FILE, LOG_LEVEL,
    CLEANUP_MIN_DURATION_SECONDS, CLEANUP_KEYWORDS
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
log_level_map = {'DEBUG': logging.DEBUG, 'INFO': logging.INFO, 'WARNING': logging.WARNING, 'ERROR': logging.ERROR}
log_level = log_level_map.get(LOG_LEVEL.upper(), logging.INFO)
logging.basicConfig(
    level=log_level,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(CLEANUP_LOG_FILE, encoding='utf-8', mode='w'),
        logging.StreamHandler(sys.stdout)
    ]
)
logging.getLogger().handlers[1].setLevel(logging.INFO) # –ö–æ–Ω—Å–æ–ª—å —Ç–æ–ª—å–∫–æ INFO –∏ –≤—ã—à–µ
logger = logging.getLogger(__name__)
# -----------------------------

def is_podcast_or_mix_for_cleanup(filepath):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –ø–æ–¥–∫–∞—Å—Ç–æ–º/–º–∏–∫—Å–æ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py (CLEANUP_MIN_DURATION_SECONDS, CLEANUP_KEYWORDS).
    """
    filename_lower = os.path.basename(filepath).lower()

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    for keyword in CLEANUP_KEYWORDS:
         if keyword in filename_lower:
             logger.debug(f"–û—á–∏—Å—Ç–∫–∞: '{os.path.basename(filepath)}' - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ ('{keyword}').")
             return True

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ ID3-—Ç–µ–≥–æ–≤ –∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    try:
        audio = MP3(filepath, ID3=EasyID3)
        duration = audio.info.length if audio.info.length else 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if duration > CLEANUP_MIN_DURATION_SECONDS:
            logger.debug(f"–û—á–∏—Å—Ç–∫–∞: '{os.path.basename(filepath)}' - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ({duration / 60:.1f} –º–∏–Ω).")
            return True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ —Ç–µ–≥–∞—Ö
        title = (audio['title'][0].lower() if audio.get('title') else "")
        artist = (audio['artist'][0].lower() if audio.get('artist') else "")

        text_to_check = f"{title} {artist}"
        for keyword in CLEANUP_KEYWORDS:
            if keyword in text_to_check:
                 logger.debug(f"–û—á–∏—Å—Ç–∫–∞: '{os.path.basename(filepath)}' - –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ç–µ–≥–∞—Ö ('{keyword}').")
                 return True

    except HeaderNotFoundError:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å MP3 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ñ–∞–π–ª–∞: {os.path.basename(filepath)} - —Ñ–∞–π–ª –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è {os.path.basename(filepath)}: {e} - —Ñ–∞–π–ª –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.")

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    logger.debug(f"–û—á–∏—Å—Ç–∫–∞: '{os.path.basename(filepath)}' - –ù–ï –æ–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ –º–∏–∫—Å/–ø–æ–¥–∫–∞—Å—Ç.")
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–∞–ø–∫–∏ downloads."""
    logger.info("="*10 + "üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ—á–∏—Å—Ç–∫–∏ –º–∏–∫—Å–æ–≤/–ø–æ–¥–∫–∞—Å—Ç–æ–≤" + "="*10)

    if not os.path.isdir(DOWNLOADS_DIR):
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ {DOWNLOADS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–µ—á–µ–≥–æ –æ—á–∏—â–∞—Ç—å.")
        sys.exit(1)

    # --- –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ ---
    backup_dir_with_timestamp = f"{BACKUP_DIR_BASE}_{time.strftime('%Y%m%d_%H%M%S')}"
    try:
        logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ '{DOWNLOADS_DIR}' –≤ '{backup_dir_with_timestamp}'...")
        shutil.copytree(DOWNLOADS_DIR, backup_dir_with_timestamp)
        logger.info(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")
    except FileExistsError:
        # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        logger.error(f"‚ùå –ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ {backup_dir_with_timestamp} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        sys.exit(1)
    except Exception as e:
        logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é: {e}", exc_info=True)
        sys.exit(1)
    # --- –ö–æ–Ω–µ—Ü —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ ---

    # --- –ü–µ—Ä–µ–±–æ—Ä –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ ---
    removed_files = []
    kept_files_count = 0
    error_files = []

    logger.info(f"üßπ –ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –º–∏–∫—Å–æ–≤/–ø–æ–¥–∫–∞—Å—Ç–æ–≤ –∏–∑ {DOWNLOADS_DIR}...")
    all_files = os.listdir(DOWNLOADS_DIR)

    for filename in all_files:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ MP3 —Ñ–∞–π–ª—ã
        if filename.lower().endswith('.mp3') and not filename.endswith('.part'):
            filepath = os.path.join(DOWNLOADS_DIR, filename)
            try:
                if is_podcast_or_mix_for_cleanup(filepath):
                    os.remove(filepath)
                    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filename}")
                    removed_files.append(filename)
                else:
                    kept_files_count += 1
            except OSError as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filename}: {e}")
                error_files.append(filename)
                kept_files_count += 1 # –ù–µ —É–¥–∞–ª–∏–ª–∏ - —Å—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–º—Å—è
            except Exception as e:
                 logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filename}: {e}", exc_info=True)
                 error_files.append(filename)
                 kept_files_count += 1
        elif not filename.lower().endswith('.mp3'):
            # –î—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã (–æ–±–ª–æ–∂–∫–∏ –∏ —Ç.–¥.) –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏ —Å—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è
             logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ-MP3 —Ñ–∞–π–ª–∞: {filename}")
             kept_files_count += 1


    # --- –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    logger.info("-" * 30 + "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏:" + "-"*30)
    logger.info(f"‚úÖ –û—Å—Ç–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –Ω–µ-MP3): {kept_files_count}")
    logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ MP3 —Ñ–∞–π–ª–æ–≤ (–º–∏–∫—Å—ã/–ø–æ–¥–∫–∞—Å—Ç—ã): {len(removed_files)}")
    if error_files:
        logger.warning(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏/–æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(error_files)}")
        logger.warning("–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
        for err_file in error_files: logger.warning(f"  - {err_file}")

    if removed_files:
        logger.info("\n--- –°–ø–∏—Å–æ–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö MP3 —Ñ–∞–π–ª–æ–≤ ---")
        for file in removed_files: logger.info(f"  - {file}")
        logger.info("--- –ö–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ ---")

    logger.info(f"\nüíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –ø–∞–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {os.path.abspath(backup_dir_with_timestamp)}")
    logger.warning("‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã!")
    logger.warning("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_downloader.py --skip-download")
    logger.info(f"–õ–æ–≥ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {CLEANUP_LOG_FILE}")
    logger.info("üèÅ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

if __name__ == "__main__":
    main()