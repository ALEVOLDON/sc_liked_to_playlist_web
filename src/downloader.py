# -*- coding: utf-8 -*-
import yt_dlp
from tqdm import tqdm
import os
import time
import logging
from .config import (
    DOWNLOADS_DIR, DOWNLOAD_ARCHIVE, MP3_QUALITY, EMBED_THUMBNAIL, WRITE_METADATA
)
from .utils import get_safe_filepath, filter_tracks_only

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

def download_tracks(links):
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.py.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (list_of_processed_files, success_count, skip_count, error_count)
    """
    processed_files = []
    success_count = 0
    skip_download_count = 0
    error_count = 0
    start_time = time.time()

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ü–∏–π yt-dlp –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥–∞ ---
    postprocessors = []
    if MP3_QUALITY:
         postprocessors.append({
             'key': 'FFmpegExtractAudio',
             'preferredcodec': 'mp3',
             'preferredquality': MP3_QUALITY,
         })
    if EMBED_THUMBNAIL:
         postprocessors.append({'key': 'EmbedThumbnail'})
    if WRITE_METADATA:
        postprocessors.append({'key': 'FFmpegMetadata'})
        # –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–Ω—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∑–∞–ø–∏—Å—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        postprocessor_args = {'ffmpegextractaudio': ['-metadata', 'genre=SoundCloud']}
    else:
        postprocessor_args = {}


    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': os.path.join(DOWNLOADS_DIR, '%(title)s.%(ext)s'),
        'quiet': True,
        'noplaylist': True,
        'ignoreerrors': True, # –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤
        'writethumbnail': EMBED_THUMBNAIL, # –°–∫–∞—á–∏–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—É–¥–µ–º –≤—Å—Ç—Ä–∞–∏–≤–∞—Ç—å
        'writeinfojson': False, # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º info.json
        'download_archive': DOWNLOAD_ARCHIVE,
        'postprocessors': postprocessors,
        'postprocessor_args': postprocessor_args,
        'keepvideo': False,
        'match_filter': filter_tracks_only, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Ñ–∏–ª—å—Ç—Ä
         # 'verbose': True, # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ yt-dlp
    }
    # --- –ö–æ–Ω–µ—Ü —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ü–∏–π ---

    logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ/–æ–±—Ä–∞–±–æ—Ç–∫—É {len(links)} —Å—Å—ã–ª–æ–∫ –≤ {DOWNLOADS_DIR}...")
    logger.debug(f"–û–ø—Ü–∏–∏ yt-dlp: {ydl_opts}")

    os.makedirs(DOWNLOADS_DIR, exist_ok=True) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è yt-dlp
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            # tqdm –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            with tqdm(total=len(links), unit="—Å—Å—ã–ª–∫–∞", dynamic_ncols=True, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫") as pbar:
                for link in links:
                    pbar.set_description(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {link[:50]}...") # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ —Å—Å—ã–ª–∫–∏
                    try:
                        # extract_info –≤—ã–ø–æ–ª–Ω–∏—Ç —Ñ–∏–ª—å—Ç—Ä –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                        info = ydl.extract_info(link, download=True)
                        download_status = info.get('_download_status', 'downloaded') if info else 'error'

                        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ ---
                        if download_status == 'filtered':
                            reason = info.get('_filter_reason', 'N/A')
                            logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–º: {info.get('title', link)} ({reason})")
                            skip_download_count += 1
                        elif download_status == 'already_downloaded':
                             logger.info(f"‚è≠Ô∏è –£–∂–µ —Å–∫–∞—á–∞–Ω–æ (–∞—Ä—Ö–∏–≤): {info.get('title', link)}")
                             skip_download_count += 1
                             # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—É—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ñ–∞–π–ª—É
                             try:
                                base_path = ydl.prepare_filename(info).rsplit('.', 1)[0]
                                mp3_path = base_path + '.mp3'
                                if os.path.exists(mp3_path):
                                     processed_files.append(mp3_path)
                                else:
                                     # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–¥–∞–ª–∏–ª–∏ –≤—Ä—É—á–Ω—É—é, –Ω–æ –æ–Ω –≤ –∞—Ä—Ö–∏–≤–µ
                                     logger.warning(f"–§–∞–π–ª {mp3_path} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —Å–∫–∞—á–∞–Ω–Ω—ã–π, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                                     # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –∞—Ä—Ö–∏–≤–∞? –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.
                             except Exception as e:
                                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –¥–ª—è —É–∂–µ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ {info.get('title', link)}: {e}")
                        elif download_status == 'downloaded' and info and info.get('filepath'):
                            original_filepath = info['filepath']
                            final_mp3_path = os.path.splitext(original_filepath)[0] + '.mp3'
                            safe_mp3_path = get_safe_filepath(DOWNLOADS_DIR, info.get('title', 'unknown_track'))
                            try:
                                if os.path.exists(final_mp3_path):
                                    if final_mp3_path != safe_mp3_path:
                                        if os.path.exists(safe_mp3_path):
                                            logger.warning(f"–§–∞–π–ª {os.path.basename(safe_mp3_path)} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ '{os.path.basename(final_mp3_path)}'.")
                                            processed_files.append(final_mp3_path)
                                        else:
                                            os.rename(final_mp3_path, safe_mp3_path)
                                            logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ: {os.path.basename(safe_mp3_path)}")
                                            processed_files.append(safe_mp3_path)
                                            success_count += 1
                                    else:
                                         logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω–æ: {os.path.basename(final_mp3_path)}")
                                         processed_files.append(final_mp3_path)
                                         success_count += 1
                                else:
                                    # –≠—Ç–æ –º–æ–∂–µ—Ç —Å–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ postprocessor –Ω–µ —Å–æ–∑–¥–∞–ª MP3
                                    logger.error(f"‚ùå –û–∂–∏–¥–∞–µ–º—ã–π MP3 —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {final_mp3_path} (–û—Ä–∏–≥–∏–Ω–∞–ª: {original_filepath})")
                                    error_count += 1
                            except OSError as rename_err:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è '{os.path.basename(final_mp3_path)}' -> '{os.path.basename(safe_mp3_path)}': {rename_err}")
                                error_count += 1
                                if os.path.exists(final_mp3_path): processed_files.append(final_mp3_path)
                        elif info is None or download_status == 'error':
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (info is None –∏–ª–∏ status error): {link}")
                            error_count += 1
                        else:
                             logger.warning(f"‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å: {info.get('title', link)} (–°—Ç–∞—Ç—É—Å: {download_status})")
                             error_count += 1
                        # --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ ---

                    except yt_dlp.utils.DownloadError as e:
                        if "unable to download json metadata" in str(e).lower(): logger.warning(f"‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è {link} (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–∫ —É–¥–∞–ª–µ–Ω/–ø—Ä–∏–≤–∞—Ç–Ω—ã–π)")
                        else: logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {link}: {e}")
                        error_count += 1
                    except Exception as e:
                        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {link}: {e}", exc_info=True)
                        error_count += 1
                    finally:
                        pbar.update(1)
                        pbar.set_postfix_str(f"‚úÖ{success_count} ‚è≠Ô∏è{skip_download_count} ‚ùå{error_count}")

    except Exception as e:
         logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ yt-dlp –∏–ª–∏ –≤ —Ü–∏–∫–ª–µ: {e}", exc_info=True)
         # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—á–µ—Ç—á–∏–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
         return processed_files, success_count, skip_download_count, error_count

    # –ò—Ç–æ–≥–∏
    total_time = time.time() - start_time
    logger.info("-" * 30+"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:"+"-"*30)
    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤: {success_count}")
    logger.info(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–º–∏–∫—Å—ã/–ø–æ–¥–∫–∞—Å—Ç—ã/–∞—Ä—Ö–∏–≤): {skip_download_count}")
    logger.info(f"‚ùå –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏/—Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {error_count}")
    logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {time.strftime('%H:%M:%S', time.gmtime(total_time))}")
    logger.info("-" * (60 + len("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:")))

    return processed_files, success_count, skip_download_count, error_count