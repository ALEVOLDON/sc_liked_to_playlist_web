# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
import os
import sys
import logging
import traceback # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º traceback –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–æ–∫

# --- –î–æ–±–∞–≤–ª—è–µ–º –ö–û–†–ï–ù–¨ –ü–†–û–ï–ö–¢–ê –≤ sys.path ---
current_dir = os.path.dirname(os.path.abspath(__file__))
project_root = os.path.dirname(current_dir)
if project_root not in sys.path:
    sys.path.insert(0, project_root) # –î–æ–±–∞–≤–ª—è–µ–º –ö–û–†–ï–ù–¨ –ø—Ä–æ–µ–∫—Ç–∞
# ---------------------------------------------------

# --- –ò–º–ø–æ—Ä—Ç—ã –∏–∑ src ---
# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Streamlit
try:
    from src.config import CSV_FILE, DATA_DIR
    from src.scraper import setup_driver, scroll_and_collect
    # logger = logging.getLogger(__name__)
except ImportError as e:
     st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –∏–∑ 'src': {e}")
     st.error(f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –≤–µ—Ä–Ω–∞, —Ñ–∞–π–ª '{os.path.join(project_root, 'src', '__init__.py')}' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞.")
     st.stop()

# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –ø–æ–∑–∂–µ, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) ---
# –ú—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Ö –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ try/except –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è,
# —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
# –±–µ–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.
# from src.downloader import download_tracks, cleanup_temp_files
# from src.playlist import create_playlist_json, create_m3u_playlist
# from src.config import DOWNLOADS_DIR, PLAYLIST_JSON_FILE, PLAYLIST_M3U_FILE, PLAYLIST_JSON_SORT_ORDER
# ----------------------

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ===
DEFAULT_SCROLL_WAIT_TIME = 2.0 # –°–µ–∫—É–Ω–¥—ã
DEFAULT_MAX_CONSECUTIVE_SAME_HEIGHT = 3 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤—ã—Å–æ—Ç—ã
DEFAULT_MAX_TRACKS = 100 # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –ª–∏–º–∏—Ç–∞

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ===
st.set_page_config(page_title="SoundCloud Like Collector", layout="wide")
st.title("üéµ SoundCloud Like Collector")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ CSV –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
try:
    csv_rel_path = os.path.relpath(CSV_FILE, project_root)
except NameError:
    csv_rel_path = os.path.join('data', 'liked_tracks.csv') # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

st.caption(f"–°–æ–±–∏—Ä–∞–µ—Ç –ª–∞–π–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ—Ç `{csv_rel_path}` –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.") # –ò–∑–º–µ–Ω–µ–Ω–æ

# –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
col1, col2 = st.columns([2, 1])

with col1:
    username = st.text_input(
        "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è SoundCloud:", "",
        help="–¢–æ, —á—Ç–æ –∏–¥–µ—Ç –ø–æ—Å–ª–µ soundcloud.com/"
    )
    start_button = st.button("üöÄ –°–æ–±—Ä–∞—Ç—å, –æ–±–Ω–æ–≤–∏—Ç—å –∏ —Å–∫–∞—á–∞—Ç—å") # –ò–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞–¥–ø–∏—Å—å

with col2:
    st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±–æ—Ä–∞")
    scroll_wait = st.number_input(
        "–ü–∞—É–∑–∞ –ø–æ—Å–ª–µ —Å–∫—Ä–æ–ª–ª–∞ (—Å–µ–∫—É–Ω–¥—ã):",
        min_value=0.5, max_value=10.0, value=DEFAULT_SCROLL_WAIT_TIME, step=0.1,
        help="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤. –£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."
        )
    max_wait_count = st.number_input(
        "–ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:",
        min_value=1, max_value=10, value=DEFAULT_MAX_CONSECUTIVE_SAME_HEIGHT, step=1,
        help="–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã—Å–æ—Ç–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞—Å—Ç—å, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–æ–ª–ª–∏–Ω–≥ (–µ—Å–ª–∏ –ª–∏–º–∏—Ç —Ç—Ä–µ–∫–æ–≤ –Ω–µ –∑–∞–¥–∞–Ω)."
        )
    max_tracks_limit = st.number_input(
        "–ú–∞–∫—Å. —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ (0 = –±–µ–∑ –ª–∏–º–∏—Ç–∞):",
        min_value=0, value=DEFAULT_MAX_TRACKS, step=10,
        help="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–±–æ—Ä, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–∞–π–¥–µ–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤. 0 - —Å–æ–±–∏—Ä–∞—Ç—å –≤—Å–µ –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."
        )

st.markdown("---")

# –ò–Ω—Ñ–æ –æ CSV (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º)
existing_tracks_on_load = 0
csv_exists_on_load = False
try:
    csv_full_path = CSV_FILE
    if os.path.exists(csv_full_path):
        csv_exists_on_load = True
        try:
            df_existing_on_load = pd.read_csv(csv_full_path)
            existing_tracks_on_load = len(df_existing_on_load)
            st.info(f"‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª `{csv_rel_path}` ({existing_tracks_on_load} —Ç—Ä–µ–∫–æ–≤).")
        except Exception as e:
            st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π `{csv_rel_path}` –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º: {e}")
    else:
        st.info(f"‚ÑπÔ∏è –§–∞–π–ª `{csv_rel_path}` –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω.")
except NameError:
    st.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É (–æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞?).")


# --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è Streamlit ---
if 'status_message' not in st.session_state: st.session_state.status_message = ""
if 'progress_value' not in st.session_state: st.session_state.progress_value = 0
if 'progress_text' not in st.session_state: st.session_state.progress_text = ""
if 'caption_message' not in st.session_state: st.session_state.caption_message = ""

status_placeholder = st.empty()
progress_bar_placeholder = st.empty()
progress_text_placeholder = st.empty()
caption_placeholder = st.empty()

# –û–±–Ω–æ–≤–ª—è–µ–º callback –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å —É—á–µ—Ç–æ–º –ª–∏–º–∏—Ç–∞
def update_streamlit_ui(type, message):
     global max_tracks_limit # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ª–∏–º–∏—Ç–∞ –∏–∑ UI
     if type == "status":
          st.session_state.status_message = message
     elif type == "progress":
          current_total = message
          target = max_tracks_limit if max_tracks_limit > 0 else 1000
          st.session_state.progress_value = min(current_total / target, 1.0) if target > 0 else 0
          progress_info = f" ({current_total}/{max_tracks_limit})" if max_tracks_limit > 0 else ""
          st.session_state.progress_text = f"–°–æ–±—Ä–∞–Ω–æ {current_total} —Ç—Ä–µ–∫–æ–≤{progress_info}..."
     elif type == "caption":
          st.session_state.caption_message = message
     elif type == "info":
          status_placeholder.info(message)
     elif type == "warning":
          status_placeholder.warning(message)
     elif type == "error":
          status_placeholder.error(message)
     elif type == "success":
         status_placeholder.success(message)

     # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –∏–∑ session_state
     if st.session_state.status_message: status_placeholder.info(st.session_state.status_message)
     if st.session_state.progress_text:
          progress_bar_placeholder.progress(st.session_state.progress_value)
          progress_text_placeholder.text(st.session_state.progress_text)
     if st.session_state.caption_message: caption_placeholder.caption(st.session_state.caption_message)


# === –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞, –û–ë–ù–û–í–õ–ï–ù–ò–Ø –∏ –°–ö–ê–ß–ò–í–ê–ù–ò–Ø ===
if start_button:
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
    st.session_state.status_message = ""
    st.session_state.progress_value = 0
    st.session_state.progress_text = ""
    st.session_state.caption_message = ""
    status_placeholder.empty()
    progress_bar_placeholder.empty()
    progress_text_placeholder.empty()
    caption_placeholder.empty()

    # –û—á–∏—â–∞–µ–º –∏ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    st.success("") # –°–∫—Ä–æ–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    st.info("") # –°–∫—Ä–æ–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ info
    st.warning("") # –°–∫—Ä–æ–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ

    if not username.strip():
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è SoundCloud.")
    else:
        profile_url = f"https://soundcloud.com/{username.strip()}/likes"
        st.markdown(f"üîó –°–æ–±–∏—Ä–∞–µ–º –ª–∞–π–∫–∏: [{profile_url}]({profile_url})")
        limit_text = f"–¥–æ –ª–∏–º–∏—Ç–∞ –≤ {max_tracks_limit} —Ç—Ä–µ–∫–æ–≤" if max_tracks_limit > 0 else "–¥–æ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
        st.markdown(f"(–ü–∞—É–∑–∞: {scroll_wait} —Å–µ–∫, –ü—Ä–æ–≤–µ—Ä–æ–∫ –∫–æ–Ω—Ü–∞: {max_wait_count}, –õ–∏–º–∏—Ç: {limit_text})")

        driver = None
        try:
            # --- –≠—Ç–∞–ø 1: –°–±–æ—Ä –ª–∞–π–∫–æ–≤ ---
            st.subheader("–≠—Ç–∞–ø 1: –°–±–æ—Ä –ª–∞–π–∫–æ–≤")
            if 'setup_driver' not in globals() or 'scroll_and_collect' not in globals():
                 st.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ src.")
                 st.stop()

            with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome..."):
                driver = setup_driver()

            collected_list = scroll_and_collect(
                driver, profile_url, scroll_wait, max_wait_count,
                update_streamlit_ui, max_tracks=max_tracks_limit
            )

            status_placeholder.empty()
            progress_bar_placeholder.empty()
            progress_text_placeholder.empty()
            caption_placeholder.empty()

            if collected_list is None:
                 st.error("–°–±–æ—Ä –ª–∞–π–∫–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
                 st.stop() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–±–æ—Ä –Ω–µ —É–¥–∞–ª—Å—è

            total_scraped_this_run = len(collected_list)
            completion_reason = f"(–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç: {max_tracks_limit})" if (max_tracks_limit > 0 and total_scraped_this_run >= max_tracks_limit) else "(–¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã)"
            st.success(f"‚úÖ –≠—Ç–∞–ø 1 –∑–∞–≤–µ—Ä—à–µ–Ω! –°–æ–±—Ä–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤: {total_scraped_this_run} {completion_reason}")

            # --- –≠—Ç–∞–ø 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV ---
            st.subheader("–≠—Ç–∞–ø 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ CSV")
            if not collected_list and not csv_exists_on_load:
                 st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ª–∞–π–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –Ω–µ –±—ã–ª–æ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ CSV. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–Ω–µ—Ç—Å—è.")
                 st.stop() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—á–µ–≥–æ —Å–∫–∞—á–∏–≤–∞—Ç—å

            df_final = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º df_final
            try:
                with st.spinner("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞..."):
                    df_new = pd.DataFrame(collected_list, columns=["Title", "Link"]) if collected_list else pd.DataFrame(columns=["Title", "Link"])

                    df_existing = None
                    existing_links_count = 0
                    newly_added_count = 0
                    final_links_count = 0
                    csv_read_error = False

                    try:
                        if 'CSV_FILE' in globals() and os.path.exists(CSV_FILE):
                             df_existing = pd.read_csv(CSV_FILE)
                             existing_links_count = len(df_existing)
                        # –ù–µ—Ç –Ω—É–∂–¥—ã –≤—ã–≤–æ–¥–∏—Ç—å info –æ —á—Ç–µ–Ω–∏–∏ –∑–¥–µ—Å—å, —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –≤ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                    except Exception as e:
                        st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π CSV —Ñ–∞–π–ª: {e}. –û–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.")
                        df_existing = None
                        csv_read_error = True

                    if df_existing is not None:
                        df_combined = pd.concat([df_existing, df_new], ignore_index=True)
                    else:
                        df_combined = df_new

                    df_final = df_combined.drop_duplicates(subset=['Link'], keep='last')
                    final_links_count = len(df_final)

                    if df_existing is not None and not csv_read_error:
                        newly_added_count = final_links_count - existing_links_count
                    else:
                         newly_added_count = final_links_count

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π CSV
                    if 'DATA_DIR' not in globals() or 'CSV_FILE' not in globals():
                         st.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç–∏ –∏–∑ src.config.")
                         st.stop()
                    os.makedirs(DATA_DIR, exist_ok=True)
                    df_final.to_csv(CSV_FILE, index=False, encoding='utf-8')

                st.info(f"üíæ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ `{csv_rel_path}`.")
                if df_existing is not None and not csv_read_error:
                    st.success(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CSV: –ë—ã–ª–æ: {existing_links_count}, –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: {newly_added_count}, –í—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ: {final_links_count}")
                elif csv_read_error:
                    st.warning(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CSV (—Ñ–∞–π–ª –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω): –í—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ: {final_links_count}")
                else: # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ –±—ã–ª–æ
                    st.success(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ CSV (—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω): –í—Å–µ–≥–æ –≤ —Ñ–∞–π–ª–µ: {final_links_count}")

                # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ CSV (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                csv_data = df_final.to_csv(index=False).encode('utf-8')
                st.download_button(
                    label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π CSV", data=csv_data,
                    file_name=f"{username.strip()}_liked_tracks_final.csv", mime="text/csv"
                )

            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π CSV: {e}")
                st.code(traceback.format_exc())
                st.stop() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º, –µ—Å–ª–∏ CSV –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å

            # --- –≠—Ç–∞–ø 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ ---
            st.markdown("---")
            st.subheader("–≠—Ç–∞–ø 3: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ DataFrame
            if df_final is None or df_final.empty:
                 st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –∏—Ç–æ–≥–æ–≤–æ–º CSV –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")
                 st.stop()

            links_to_download = df_final['Link'].dropna().unique().tolist()

            if not links_to_download:
                  st.warning("–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –∏—Ç–æ–≥–æ–≤–æ–º CSV.")
            else:
                  st.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(links_to_download)} —Å—Å—ã–ª–æ–∫ (—Å–∫–∞—á–∏–≤–∞–Ω–∏–µ / –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–∞)...")
                  st.warning("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å –≤–æ –≤—Ä–µ–º—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω Streamlit.")

                  try:
                       # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–¥–µ—Å—å
                       from src.downloader import download_tracks, cleanup_temp_files
                       from src.playlist import create_playlist_json, create_m3u_playlist
                       from src.config import DOWNLOADS_DIR, PLAYLIST_JSON_FILE, PLAYLIST_M3U_FILE, PLAYLIST_JSON_SORT_ORDER, CLEANUP_THUMBNAILS_AFTER_DOWNLOAD

                       # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ (–±–ª–æ–∫–∏—Ä—É—é—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)
                       with st.spinner("–ò–¥–µ—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ/–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–æ–≤... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."):
                            processed_files, success_count, skip_count, error_count = download_tracks(links_to_download)

                       st.success(f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ/–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
                       st.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: –£—Å–ø–µ—à–Ω–æ: {success_count}, –ü—Ä–æ–ø—É—â–µ–Ω–æ (—Ñ–∏–ª—å—Ç—Ä/–∞—Ä—Ö–∏–≤): {skip_count}, –û—à–∏–±–∫–∏: {error_count}")

                       # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                       if CLEANUP_THUMBNAILS_AFTER_DOWNLOAD:
                           with st.spinner("–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–±–ª–æ–∂–µ–∫..."):
                                cleanup_temp_files()
                       else:
                            st.info("‚ÑπÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ–±–ª–æ–∂–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ config.py.")


                       # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
                       st.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")
                       with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤..."):
                            if not os.path.isdir(DOWNLOADS_DIR):
                                 st.warning(f"–ü–∞–ø–∫–∞ {DOWNLOADS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–ª–µ–π–ª–∏—Å—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã.")
                                 json_created = False
                                 m3u_created = False
                            else:
                                 json_created = create_playlist_json(
                                      output_dir=DOWNLOADS_DIR,
                                      output_file=PLAYLIST_JSON_FILE,
                                      sort_order=PLAYLIST_JSON_SORT_ORDER
                                 )
                                 m3u_created = create_m3u_playlist(
                                      output_dir=DOWNLOADS_DIR,
                                      output_file=PLAYLIST_M3U_FILE
                                 )

                       if json_created or m3u_created:
                            st.success("‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã/–æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
                            try:
                                 playlist_rel_path = os.path.relpath(PLAYLIST_JSON_FILE, project_root)
                                 m3u_rel_path = os.path.relpath(PLAYLIST_M3U_FILE, project_root)
                                 st.markdown(f"* –í–µ–±-–ø–ª–µ–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç: `{playlist_rel_path}`")
                                 st.markdown(f"* M3U –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: `{m3u_rel_path}`")

                            except NameError: pass
                       else:
                            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–∞–ø–∫–∞ 'downloads' –ø—É—Å—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞).")

                       st.balloons() # –§–∏–Ω–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö!

                  except ImportError as import_err:
                       st.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {import_err}")
                       st.code(traceback.format_exc())
                  except Exception as download_err:
                       st.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {download_err}")
                       st.code(traceback.format_exc())

            st.markdown("---")
            st.info("üèÅ –í—Å–µ —ç—Ç–∞–ø—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

        # --- –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞ ---
        except Exception as e:
            st.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —ç—Ç–∞–ø–æ–≤: {e}")
            st.error("Traceback:")
            st.code(traceback.format_exc())
        finally:
            if driver:
                try:
                    driver.quit()
                    st.info("–î—Ä–∞–π–≤–µ—Ä Chrome –∑–∞–∫—Ä—ã—Ç.")
                except Exception as e:
                    st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –¥—Ä–∞–π–≤–µ—Ä Chrome: {e}")