# -*- coding: utf-8 -*-
import os
import sys
import argparse
import logging
import pandas as pd
from src.config import (
    BASE_DIR, CSV_FILE, DOWNLOAD_LOG_FILE, LOG_LEVEL, DOWNLOADS_DIR,
    PLAYLIST_JSON_FILE, PLAYLIST_M3U_FILE, PLAYLIST_JSON_SORT_ORDER,
    CLEANUP_THUMBNAILS_AFTER_DOWNLOAD
)
from src.downloader import download_tracks
from src.playlist import create_playlist_json, create_m3u_playlist

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
log_level_map = {
    'DEBUG': logging.DEBUG, 'INFO': logging.INFO,
    'WARNING': logging.WARNING, 'ERROR': logging.ERROR
}
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO
log_level = log_level_map.get(LOG_LEVEL.upper(), logging.INFO)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=log_level,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
        logging.FileHandler(DOWNLOAD_LOG_FILE, encoding='utf-8', mode='w'),
        # –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏ —É—Ä–æ–≤–Ω—è INFO –∏ –≤—ã—à–µ –≤ –∫–æ–Ω—Å–æ–ª—å
        logging.StreamHandler(sys.stdout)
    ]
)
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å INFO –¥–ª—è StreamHandler, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –∫–æ–Ω—Å–æ–ª—å DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
logging.getLogger().handlers[1].setLevel(logging.INFO)

# –õ–æ–≥–≥–µ—Ä —ç—Ç–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
logger = logging.getLogger(__name__) # –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ = –∏–º—è –º–æ–¥—É–ª—è
# -----------------------------

def cleanup_temp_files():
    """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ–±–ª–æ–∂–µ–∫, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ."""
    # info.json —Ñ–∞–π–ª—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∏ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è
    thumb_count = 0
    if not CLEANUP_THUMBNAILS_AFTER_DOWNLOAD:
        logger.info("‚ÑπÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –æ–±–ª–æ–∂–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞ (CLEANUP_THUMBNAILS_AFTER_DOWNLOAD=False).")
        return

    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ–±–ª–æ–∂–µ–∫...")
    try:
        if not os.path.isdir(DOWNLOADS_DIR):
             logger.warning(f"–ü–∞–ø–∫–∞ {DOWNLOADS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
             return

        for filename in os.listdir(DOWNLOADS_DIR):
            filepath = os.path.join(DOWNLOADS_DIR, filename)
            try:
                if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.webp')):
                     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ MP3
                     mp3_equivalent = os.path.splitext(filepath)[0] + '.mp3'
                     if os.path.exists(mp3_equivalent):
                          os.remove(filepath)
                          thumb_count += 1
                          logger.debug(f"–£–¥–∞–ª–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞: {filename}")
                     else:
                          logger.debug(f"–û–±–ª–æ–∂–∫–∞ {filename} –æ—Å—Ç–∞–≤–ª–µ–Ω–∞ (–Ω–µ—Ç MP3).")
            except OSError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}", exc_info=True)

    logger.info(f"‚ú® –£–¥–∞–ª–µ–Ω–æ {thumb_count} —Ñ–∞–π–ª–æ–≤ –æ–±–ª–æ–∂–µ–∫.")


def check_file_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
    all_ok = True
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö (–≥–¥–µ CSV –∏ –∞—Ä—Ö–∏–≤)
    if not os.path.isdir(os.path.dirname(CSV_FILE)):
         logger.critical(f"‚ùå –ü–∞–ø–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {os.path.dirname(CSV_FILE)}")
         all_ok = False
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CSV —Ñ–∞–π–ª (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ)
    if not args.skip_download and not os.path.exists(CSV_FILE):
         logger.critical(f"‚ùå –§–∞–π–ª —Å –ª–∞–π–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {CSV_FILE}. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä –ª–∞–π–∫–æ–≤.")
         all_ok = False
    # –ü–∞–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    # –ü–∞–ø–∫–∞ –¥–ª—è –ø–ª–µ–µ—Ä–∞ (–∫—É–¥–∞ –ø–∏—à–µ–º JSON) –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞
    if all_ok:
         logger.info("‚úÖ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
    return all_ok

def main(skip_download_flag):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤."""
    logger.info("="*10 + "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤" + "="*10)

    if not check_file_structure() and not skip_download_flag:
         logger.critical("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
         sys.exit(1) # –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏

    links_to_download = []
    if not skip_download_flag:
        # --- –ó–∞–≥—Ä—É–∑–∫–∞ CSV ---
        try:
            logger.info(f"–ß—Ç–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞: {CSV_FILE}")
            df = pd.read_csv(CSV_FILE)
            links_to_download = df['Link'].dropna().unique().tolist()
            logger.info(f"üéß –ù–∞–π–¥–µ–Ω–æ {len(links_to_download)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫.")
            if not links_to_download:
                logger.warning("‚ö†Ô∏è CSV —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–æ–∫. –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–Ω–µ—Ç—Å—è.")
        except FileNotFoundError:
            logger.error(f"‚ùå –§–∞–π–ª {CSV_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–µ—á–µ–≥–æ —Å–∫–∞—á–∏–≤–∞—Ç—å.")
            # –í—ã—Ö–æ–¥, —Ç–∞–∫ –∫–∞–∫ –±–µ–∑ CSV —Å–∫–∞—á–∏–≤–∞—Ç—å –Ω–µ—á–µ–≥–æ (–µ—Å–ª–∏ –Ω–µ skip_download)
            sys.exit(1)
        except Exception as e:
            logger.critical(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å CSV —Ñ–∞–π–ª {CSV_FILE}: {e}", exc_info=True)
            sys.exit(1)
        # --- –ö–æ–Ω–µ—Ü –∑–∞–≥—Ä—É–∑–∫–∏ CSV ---
    else:
        logger.info("‚è© –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (—Ñ–ª–∞–≥ --skip-download).")

    # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ ---
    if not skip_download_flag and links_to_download:
        download_tracks(links_to_download)
        # –ü–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –æ–±–ª–æ–∂–µ–∫, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        cleanup_temp_files()
    elif not links_to_download and not skip_download_flag:
         logger.info("–°—Å—ã–ª–æ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–µ—Ç.")
    # --- –ö–æ–Ω–µ—Ü —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---

    # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (–≤—Å–µ–≥–¥–∞) ---
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤...")
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ downloads —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
    if not os.path.isdir(DOWNLOADS_DIR):
         logger.warning(f"–ü–∞–ø–∫–∞ {DOWNLOADS_DIR} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–ª–µ–π–ª–∏—Å—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã.")
    else:
        json_created = create_playlist_json(
            output_dir=DOWNLOADS_DIR,
            output_file=PLAYLIST_JSON_FILE,
            sort_order=PLAYLIST_JSON_SORT_ORDER
        )
        m3u_created = create_m3u_playlist(
            output_dir=DOWNLOADS_DIR,
            output_file=PLAYLIST_M3U_FILE
        )
        if not json_created and not m3u_created:
             logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–∞–ø–∫–∞ 'downloads' –ø—É—Å—Ç–∞?).")
    # --- –ö–æ–Ω–µ—Ü –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ ---

    logger.info("üèÅ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω.")
    logger.info(f"–õ–æ–≥ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {DOWNLOAD_LOG_FILE}")

if __name__ == "__main__":
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ---
    parser = argparse.ArgumentParser(description="–°–∫–∞—á–∏–≤–∞–µ—Ç —Ç—Ä–µ–∫–∏ SoundCloud –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç—ã.")
    parser.add_argument(
        '--skip-download',
        action='store_true', # –ï—Å–ª–∏ —Ñ–ª–∞–≥ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç True
        help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–∞–∑—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã.'
    )
    args = parser.parse_args()
    # --- –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ---

    main(skip_download_flag=args.skip_download)